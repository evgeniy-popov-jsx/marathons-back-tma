const User = require('../models/userModel');
const { sendTelegramNotification, sendRutubeVideo } = require('../services/telegramNotifications');

exports.closeMarathonDay = async (req, res) => {
  try {
    const { userId, currentDayKey, nextDayKey } = req.body;

    if (!userId || !currentDayKey || !nextDayKey) {
      return res.status(400).json({
        status: 'fail',
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId, currentDayKey –∏ nextDayKey'
      });
    }

    const updatedUser = await User.findOneAndUpdate(
      { _id: userId },
      {
        $set: {
          [`badGirl.${currentDayKey}`]: 'finished',
          [`badGirl.${nextDayKey}`]: 'open',
        }
      },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({
        status: 'fail',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.status(200).json({
      status: 'success',
      data: {
        user: updatedUser
      }
    });

  } catch (err) {
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–Ω–µ–π –º–∞—Ä–∞—Ñ–æ–Ω–∞',
      error: err.message
    });
  }
};

exports.updateMarathonDay = async (req, res) => {
  try {
    const { userId, currentDayKey, nextDayKey } = req.body;

    if (!userId || !currentDayKey || !nextDayKey) {
      return res.status(400).json({
        status: 'fail',
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId, currentDayKey –∏ nextDayKey'
      });
    }

    const updatedUser = await User.findOneAndUpdate(
      { _id: userId },
      {
        $set: {
          [`badGirl.${currentDayKey}`]: 'finished',
          [`badGirl.${nextDayKey}`]: 'update',
          'badGirl.isUpdate': true
        }
      },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({
        status: 'fail',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.status(200).json({
      status: 'success',
      data: {
        user: updatedUser
      }
    });

  } catch (err) {
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–Ω–µ–π –º–∞—Ä–∞—Ñ–æ–Ω–∞',
      error: err.message
    });
  }
};

exports.finishMarathonDay = async (req, res) => {
  try {
    const { userId, finishDayKey } = req.body;

    if (!userId || !finishDayKey) {
      return res.status(400).json({
        status: 'fail',
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId –∏ currentDay'
      });
    }

    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–Ω—è
    const updatedUser = await User.findOneAndUpdate(
      { _id: userId },
      {
        $set: {
          [`badGirl.${finishDayKey}`]: 'finished',
        }
      },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({
        status: 'fail',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    if (updatedUser.telegramId) {
      try {
        const videoPath = 'https://rutube.ru/video/private/73c6eee4aeb381e7ec65893522151c20/?p=o8RfkzHI-NG_boyQBF71sQ';
        const congratMessage = 
        `
        üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –º–∞—Ä–∞—Ñ–æ–Ω–∞!\n
‚úçÔ∏è–ë—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞, –µ—Å–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.\n
–ù–∏–∂–µ –≤ —ç—Ñ–∏—Ä–µ:
- –ø–æ—á–µ–º—É —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
- –∫–∞–∫ –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–≤–æ–π –æ—Ç–∫–∞–∑ –∏ –≤—ã–±–æ—Ä —Å–µ–±—è
- –∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–∞—Ö–æ–º ¬´–±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω–æ–π¬ª
- –∫–∞–∫ —É–∫—Ä–µ–ø–ª—è—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–ø–æ—Ä—É, –∏ —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
- —Ä–∞–∑–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—Ç–∫–∞–∑–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–µ—Ç—è–º
- —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –æ —Ç–µ—Ö–Ω–∏–∫–µ ¬´—Ä–∞–∑–≥–æ–≤–æ—Ä —Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º¬ª —Ä–∞–∑–æ–±—Ä–∞–≤ –µ–µ —Å—É—Ç—å.
        `;
        await sendTelegramNotification(updatedUser.telegramId, congratMessage);
        await sendRutubeVideo(updatedUser.telegramId, videoPath);
        
      } catch (tgError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', tgError);
      }
    }

    res.status(200).json({
      status: 'success',
      data: {
        user: updatedUser,
      }
    });

  } catch (err) {
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–Ω—è –º–∞—Ä–∞—Ñ–æ–Ω–∞',
      error: err.message
    });
  }
};